{"version":3,"sources":["components/inputStyle.js","components/Input_one.js","components/Input_two.js","App.js","serviceWorker.js","index.js"],"names":["styled","input","Input_one","useContext","AppContext","state","dispatch","className","type","placeholder","value","inputText","onChange","event","newValue","target","data","Input_two","React","createContext","initialState","reducer","action","App","useReducer","Provider","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6iBAEqBA,EAAOC,MAAV,KC0BHC,MAvBf,WAAqB,MAESC,qBAAWC,GAA9BC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,SAWd,OACI,yBAAKC,UAAU,UACX,2BAAOC,KAAK,OACLC,YAAY,aACZC,MAAOL,EAAMM,UACpBC,SAAU,SAAAC,GAAK,OAZGC,EAYkBD,EAAME,OAAOL,WAXrDJ,EAAS,CACLE,KAAM,eACNQ,KAAMF,IAHW,IAACA,O,MCYfG,MAnBf,WAAsB,IAAD,EACSd,qBAAWC,GAA9BC,EADU,EACVA,MAAOC,EADG,EACHA,SAQd,OACI,yBAAKC,UAAU,UACX,2BAAOC,KAAK,OACLC,YAAY,aACZC,MAAyB,KAAlBL,EAAMM,UACbC,SAAU,SAAAC,GAAK,OAZJC,EAYyBD,EAAME,OAAOL,WAX5DJ,EAAS,CACLE,KAAM,eACNQ,KAAMF,IAHW,IAACA,OCQjBV,EAAac,IAAMC,gBAK1BC,EAAe,CACjBT,UAAW,GAMf,SAASU,EAAQhB,EAAOiB,GACpB,OAAQA,EAAOd,MACX,IAAK,eACD,MAAO,CACHG,UAAWW,EAAON,MAE1B,QACI,OAAOI,GAgCJG,MA3Bf,WAAe,MAEeC,qBAAWH,EAASD,GAFnC,mBAEJf,EAFI,KAEGC,EAFH,KAIX,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,uBAAGA,UAAU,UAAb,gCACA,6BAOA,kBAACH,EAAWqB,SAAZ,CAAqBf,MAAO,CAACL,QAAOC,aAChC,uBAAGC,UAAY,UAAf,aACA,kBAAC,EAAD,CAAWA,UAAY,WACvB,uBAAGA,UAAY,UAAf,WACA,kBAAC,EAAD,CAAWmB,GAAK,eC7ChBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b23b748.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const input = styled.input`\r\n  background: navajowhite;\r\n  border: 0;\r\n  width: 200px;\r\n  height: 35px;\r\n  margin: 35px;\r\n  padding: 0 20px;\r\n  font-size: 15px;\r\n  border-radius: 10px;\r\n  color: darkslategray;\r\n  outline:none;\r\n`","import React, {useContext} from 'react';\r\nimport {AppContext} from \"../App\";\r\nimport {input} from './inputStyle';\r\n\r\n\r\nfunction Input_one() {\r\n    //to use our state values inside component:\r\n    const {state, dispatch} = useContext(AppContext);\r\n    //adding function witch will update state inputText value using\r\n    //dispatch. Function will be called each time we type something\r\n    //in any input\r\n    const changeInputValue = (newValue) => {\r\n        dispatch({\r\n            type: 'UPDATE_INPUT',\r\n            data: newValue,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"input1\">\r\n            <input type=\"text\"\r\n                   placeholder=\"Type Value\"\r\n                   value={state.inputText}\r\n            onChange={event => changeInputValue(event.target.value)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input_one;\r\n","import React, {useContext} from 'react';\r\nimport {AppContext} from \"../App\";\r\nimport './inportStyle.css'\r\n\r\nfunction Input_two() {\r\n    const {state, dispatch} = useContext(AppContext);\r\n    const changeInputValue = (newValue) => {\r\n        dispatch({\r\n            type: 'UPDATE_INPUT',\r\n            data: newValue\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"input2\">\r\n            <input type=\"text\"\r\n                   placeholder=\"Type Value\"\r\n                   value={state.inputText * 9.81}\r\n                   onChange={event => changeInputValue(event.target.value)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input_two;\r\n","import React, {useReducer} from 'react';\n/*useReducer is a hook that lets you optimize performance for components that\ntrigger deep updates because you can pass dispatch down instead of\ncallbacks.*/\nimport './App.css';\nimport Input_one from \"./components/Input_one\";\nimport Input_two from \"./components/Input_two\";\n\n\n\n\n//create Context object\n/*Context is primarily used when some data needs to be accessible\nby many components at different nesting levels.*/\nexport const AppContext = React.createContext();\n\n//set up initial state\n/*set Initial state object, where we store our data, which should\nbe accessible from both Inputs.*/\nconst initialState = {\n    inputText: 0,\n}\n\n//function reducer will update the initial state every time when the\n//value of any inputs will change\n//the functiom will be used with useReducer hook\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'UPDATE_INPUT':\n            return {\n                inputText: action.data\n            }\n        default:\n            return initialState\n    }\n}\n\n\nfunction App() {\n    //initialize useReducer state - hooks can be initialized only inside functions\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p className='title1'>Kilogram To Newton Converter</p>\n                <hr/>\n                {/*\nthe last part is to wrap components imput_one and input_two in AppContext.Provider\nEvery Context object comes with a Provider React component that allows consuming\ncomponents to subscribe to context changes. Providers can be nested to override\nvalues deeper within the tree\n*/}\n                <AppContext.Provider value={{state, dispatch}}>\n                    <p className = 'title2' >Kilograms</p>\n                    <Input_one className = 'input1'/>\n                    <p className = 'title3'>Newtons</p>\n                    <Input_two id = 'input2'/>\n                </AppContext.Provider>\n                {/*/////////////////////////////////////////////////////////*/}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}